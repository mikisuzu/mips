//-----------------------------------------
//           Execute Stage
//-----------------------------------------

/*
 * MEM Entry:
 *                         287         256        
 *	+---------------+---------------+
 *	|               |  dest value   |
 *	+---------------+---------------+
 *      
 *	255         224 223          192
 *	+---------------+---------------+
 *	|   operand B1  |   ALU result  |
 *	+---------------+---------------+
 *
 *	191                                   0
 *	+------------------....-----------------+
 *	|                                       |
 *	+------------------....-----------------+
 *
 *
 */


module EXE(	CLK, 
		RESET,
		FREEZE,
		ALUSrc1_PR,
		ALUSrc1,
		Instr1,
		Instr1_PR,
		Dest_Value1,
		Dst1_PR,
		readDataB1,
		readDataB1_PR,
		aluResult1_OUT,
                do_writeback1_WB,
	        writeRegister1_WB,
		Data1_WB,
		ALU_control1_PR,
		ALU_control1,		
		Data1_MEM,
                writeRegister1_MEM,
                do_writeback1_MEM, 
		do_writeback1_PR,
		do_writeback1_ID,
		readRegisterA1,
		readRegisterB1,
		writeRegister1, 
		writeRegister1_PR, 
		Instr1_10_6, 
		MemRead1, 
		MemWrite1, 
		MemRead1_PR, 
		MemWrite1_PR, 
		Operand_A1, 
		Operand_B1, 
		MemtoReg1, 
		MemtoReg1_PR, 
		aluResult1_PR
		);

/*
 * output
 */
   //output reg     [31: 0] aluResult1_PR;
   //output reg     [31: 0] Dst1_PR;
   //output reg     [31: 0] aluResult1_OUT;
   //output reg     [31: 0] readDataB1_PR;
   //output reg     [31: 0] Instr1_PR;
   //output reg     [ 5: 0] ALU_control1_PR;
   //output reg     [ 4: 0] writeRegister1_PR;
   //output reg             MemtoReg1_PR;
   //output reg             ALUSrc1_PR;
   //output reg        	  MemRead1_PR;
   //output reg        	  MemWrite1_PR;
   //output reg        	  do_writeback1_PR;

   output reg      [287: 0] mem_entry; 


/* 
 * input
 */ 
   //input          [31: 0] Operand_A1;
   //input          [31: 0] Operand_B1;
   //input          [31: 0] Dest_Value1;
   //input          [31: 0] readDataB1;
   //input          [31: 0] Instr1;
   //input          [ 5: 0] ALU_control1;
   //input          [ 4: 0] readRegisterA1;
   //input          [ 4: 0] readRegisterB1;
   //input          [ 4: 0] writeRegister1;
   //input          [ 4: 0] Instr1_10_6;
   //input                  ALUSrc1;
   //input         	  do_writeback1_ID;
   //input                  MemtoReg1;
   //input                  MemRead1;
   //input                  MemWrite1;
   input		  FREEZE;
   input                  CLK;
   input        	  RESET;        

   /* forwarding */
   input         	  do_writeback1_MEM;
   input          [ 5: 0] writeRegister1_MEM;
   input          [31: 0] Data1_MEM;
   input                  do_writeback1_RET;
   input          [ 5: 0] writeRegister1_RET;
   input          [31: 0] Data1_RET;

   input         [287: 0] exe_entry; 

/*
 * internal variables
 */

   /* for operand */
   wire           [31: 0] PCA;
   wire           [31: 0] PCAp4;
   wire           [31: 0] CIA;
   wire           [31: 0] CIAp4;
   wire            [5: 0] read_phyReg_A1;
   wire            [5: 0] read_phyReg_B1;
   wire            [5: 0] write_phyReg1;
   wire                   jumpRegister_Flag1;
   wire           [31: 0] Instr1;
   wire           [31: 0] Operand_A1;
   wire           [31: 0] Operand_B1;
   wire           [31: 0] destValue1;
   wire                   do_writeback_PRE;
   wire            [5: 0] write_phyReg_PRE;
   wire           [31: 0] aluResult_PRE;


   wire           [31: 0] Jump_address1;
   wire           [31: 0] signExtended_output1;
   wire                   sign_or_zero_Flag1;
   wire               	  jump1; 
   wire                   ALUSrc1;
   wire           [31: 0] Shift_addResult1;
   wire           [31: 0] nia1;
   wire                   taken_branch1;

   wire            [5: 0] ALU_control1;
   wire            [4: 0] Instr1_10_6;
   wire           [31: 0] aluResult1;
   wire           [31: 0] OpA1;
   wire           [31: 0] OpB1;
   wire           [31: 0] Dst1;
   reg            [31: 0] HI;
   reg            [31: 0] LO;
   reg                    comment;


assign PCA 	          = exe_entry[ 95: 64]; 
assign CIA 		  = exe_entry[127: 96]; 
assign read_phyReg_A1	  = exe_entry[  6:  1];
assign read_phyReg_B1	  = exe_entry[ 13:  8];
assign write_phyReg1	  = exe_entry[ 19: 14];
assign Operand_A1         = exe_entry[223:192];
assign Operand_B1         = (ALUSrc1) ? signExtended_output1 : exe_entry[255:224];
assign destValue1	  = exe_entry[287:256];

assign ALU_control1	  = exe_entry[153:148];
assign Instr1_10_6	  = exe_entry[147:143];

assign jumpRegister_Flag1 = exe_entry[162];
assign sign_or_zero_Flag1 = exe_entry[129];
assign jump1 		  = exe_entry[137];
assign ALUSrc1		  = exe_entry[132];
assign Instr1             = exe_entry[ 63: 32];

assign do_writeback_PRE   = mem_entry[172];
assign write_phyReg_PRE   = mem_entry[ 19: 14];
assign aluResult_PRE      = mem_entry[223:192];

assign CIAp4 		  = CIA + 32'h00000004;
assign PCAp4 		  = PCA + 32'h00000004;
assign Jump_address1      =(jumpRegister_Flag1) ? {CIA[31:28], Instr1[25:0], 2'b0} : OpA1;
assign signExtended_output1 = (sign_or_zero_Flag1)?{{16{Instr1[15]}},Instr1[15:0]}:{16'b0,Instr1[15:0]};
assign Shift_addResult1   = PCA+(signExtended_output1<<2); 
assign nia1               = (jump1)? Jump_address1: ((taken_branch1)? Shift_addResult1: PCA);

   	initial comment = 0;  //show EXE displays

	// Forwarding for Slot 1
	always begin
		// Operand A
		if(do_writeback_PRE && (write_phyReg_PRE == read_phyReg_A1))
         		OpA1 = aluResult_PRE;
		else if(do_writeback1_MEM && (writeRegister1_MEM == read_phyReg_A1))
			OpA1 = Data1_MEM;
		else if(do_writeback1_RET && (writeRegister1_RET == read_phyReg_A1))
			OpA1 = Data1_RET;
		else OpA1 = Operand_A1;
		// Operand B
		if(do_writeback_PRE && (write_phyReg_PRE == read_phyReg_B1)/* && (ALUSrc1!=1)/**/)
			OpB1 = aluResult_PRE;
		else if(do_writeback1_MEM && (writeRegister1_MEM == read_phyReg_B1)/* && (ALUSrc1!=1)/**/)
			OpB1 = Data1_MEM;
		else if(do_writeback1_RET && (writeRegister1_RET == read_phyReg_B1)/* && (ALUSrc1!=1)/**/)
			OpB1 = Data1_RET;
		else OpB1 = Operand_B1;
		// Destination
		if(do_writeback_PRE && (write_phyReg_PRE == write_phyReg1))
			Dst1 = aluResult_PRE;
		else if(do_writeback1_MEM && (writeRegister1_MEM == write_phyReg1))
			Dst1 = Data1_MEM;
		else if(do_writeback1_RET && (writeRegister1_RET == write_phyReg1))
			Dst1 = Data1_RET;
		else Dst1 = destValue1;
	end

	compare compare1(jump1,OpA1,OpB1,Instr1,taken_branch1);

   	//assign aluResult1_OUT = aluResult1;

	ALU ALU1(HI, LO, aluResult1, OpA1, OpB1, ALU_control1, Instr1_10_6, CLK);

	//Pipeline Stage 1
	always @ (posedge CLK or negedge RESET) begin
		if(!RESET)
		begin
			//MemtoReg1_PR <= 1'b0;
			//MemRead1_PR <= 1'b0;
			//MemWrite1_PR <= 1'b0;
			//aluResult1_PR <= 32'b0;
			//writeRegister1_PR <= 5'b0;
			//do_writeback1_PR <= 1'b0;
			//ALU_control1_PR <= 6'b0;
			//readDataB1_PR <= 32'b0;
			//Dst1_PR <= 32'b0;
			//Instr1_PR <= 32'b0;
			//ALUSrc1_PR <= 1'b0;
			mem_entry <= 288'b0;
		end
		else if(!FREEZE)
		begin
		     	//MemtoReg1_PR <= MemtoReg1;
		     	//readDataB1_PR <= ((do_writeback1_MEM)&&(writeRegister1_MEM==writeRegister1))?Data1_MEM:(((do_writeback1_WB)&&(writeRegister1_WB==writeRegister1))?Data1_WB:readDataB1);
        	     	//aluResult1_PR <= aluResult1;
		     	//MemRead1_PR <= MemRead1;
		     	//MemWrite1_PR <= MemWrite1;
		     	//writeRegister1_PR <= writeRegister1;
		     	//do_writeback1_PR <= do_writeback1_ID;
        	     	//ALU_control1_PR <= ALU_control1;
		     	//Dst1_PR <= Dst1;
		     	//Instr1_PR <= Instr1;
		     	//ALUSrc1_PR <= ALUSrc1;
		     	mem_entry <= {Dst1, OpB1, luResult1, exe_entry[191:0]};
		end
	end
 
      
  always begin
	if(comment) begin
		$display("=============================================================");
/*		$display("[EXE]:Data1_WB:%x\t\t|Data2_WB:%x", Data1_WB, Data2_WB);
                $display("[EXE]:Data1_MEM:%x\t|Data2_MEM:%x", Data1_MEM, Data2_MEM);
		$display("[EXE]:OpA1:%x\t\t|OpA2:%x",OpA1,OpA2);
		$display("[EXE]:OpB1:%x\t\t|OpB2:%x",OpB1,OpB2);
		$display("[EXE]:Operand_A1:%x\t|Operand_A2:%x",Operand_A1,Operand_A2);
		$display("[EXE]:Operand_B1:%x\t|Operand_B2:%x",Operand_B1,Operand_B2);
		$display("[EXE]:aluResult1:%x\t|aluResult2:%x",aluResult1,aluResult2);
		$display("[EXE]:readRegisterA1:%x\t\t|readRegisterA2:%x",readRegisterA1,readRegisterA2);
		$display("[EXE]:readRegisterB1:%x\t\t|readRegisterB2:%x",readRegisterB1,readRegisterB2);
		$display("[EXE]:writeRegister1:%x\t\t|writeRegister2:%x",writeRegister1,writeRegister2);
		$display("[EXE]:do_writeback1_PR:%x\t|do_writeback2_PR:%x",do_writeback1_PR,do_writeback2_PR);
		$display("[EXE]:writeRegister1_PR:%x\t|writeRegister2_PR:%x",writeRegister1_PR,writeRegister2_PR);
		$display("[EXE]:aluResult1_PR:%x\t|aluResult2_PR:%x",aluResult1_PR,aluResult2_PR);
		$display("[EXE]:do_writeback1_MEM:%x\t|do_writeback2_MEM:%x",do_writeback1_MEM,do_writeback2_MEM);
 		$display("[EXE]:writeRegister1_MEM:%x\t|writeRegister2_MEM:%x",writeRegister1_MEM,writeRegister2_MEM);
		$display("[EXE]:Data1_MEM:%x\t|Data2_MEM:%x",Data1_MEM,Data2_MEM);
 		$display("[EXE]:do_writeback1_WB:%x\t|do_writeback2_WB:%x",do_writeback1_WB,do_writeback2_WB);
		$display("[EXE]:writeRegister1_WB:%x\t|writeRegister2_WB:%x",writeRegister1_WB,writeRegister2_WB);
		$display("[EXE]:Data1_WB:%x\t\t|Data2_WB:%x",Data1_WB,Data2_WB);
		$display("[EXE]:readDataB1_PR:%x\t|readDataB2_PR:%x",readDataB1_PR,readDataB2_PR);
		/**/				
	end	
   end

endmodule
